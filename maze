import turtle
import time
import math

window = turtle.Screen()
window.bgcolor("pink")
window.title("MazeRunner")
window.setup(1050,1050)    

class Wall(turtle.Turtle):
  def __init__(self):
    turtle.Turtle.__init__(self)
    self.shape("circle")
    self.color("white")
    self.penup()
    self.speed(0)
   
class Piece(turtle.Turtle):
  def __init__(self):
    turtle.Turtle.__init__(self)
    self.shape("circle")
    self.color("purple")
    self.penup()
    self.speed(0)
    self.cyan = 0
     
  def go_up(self):
      move_to_x = piece.xcor()
      move_to_y = piece.ycor() + 25

      if (move_to_x, move_to_y) not in walls:
          self.goto(move_to_x, move_to_y)

  def go_down(self):
      move_to_x = piece.xcor()
      move_to_y = piece.ycor() - 25

      if(move_to_x, move_to_y) not in walls:
          self.goto(move_to_x, move_to_y)
   
  def go_left(self):
      move_to_x = piece.xcor() - 25
      move_to_y = piece.ycor()

      if(move_to_x, move_to_y) not in walls:
          self.goto(move_to_x, move_to_y)
   
  def go_right(self):
      move_to_x = piece.xcor() + 25
      move_to_y = piece.ycor()

      if(move_to_x, move_to_y) not in walls:
          self.goto(move_to_x, move_to_y)

  def is_collision(self, other):
      a = self.xcor()-other.xcor()
      b = self.ycor()-other.ycor()
      distance = math.sqrt((a ** 2) + (b ** 2) )

      if distance < 3:
          return True
      else:
          return False
       

class Prize(turtle.Turtle): 
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("circle")
        self.color("cyan")
        self.penup()
        self.speed(0)
        self.cyan = 50
        self.goto(x, y)

    def destroy(self):
        self.goto(5000,5000)
        self.hideturtle()
    
levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXX XXXXXX XXXXXXXXXXXXXXXXXX",
"XXXX XXXXXX                  X",
"XXXX XXXXXX XXXXXXXXXXXXXXXX X",
"X           X              X X",
"XL         XXXXXXXXXXXXXXX X X",
"XXXXXXXXXX X X          XX X X",
"X      P X X X XXXXXXXX XX X X",
"X  XXXXXXX X X X X  X   XX X X",
"XX XXXXXXX X X X X    X XX X X",
"XX X       X X X X XX X XX X X",
"XX X XXXXXXX X X X PX X XX X X",
"XX X X     X X X XX X X X  X X",
"XX X X XXX X X X XX X X X XX X",
"XX X X XPX X X X XXXX X X XX X",
"XX X X X X X X X      X X XX X",
"XX X X X X X X X XXXXXX X XX X",
"X  X X X   X X X      X X XX X",
"X XX X XXXXX X XXXXXXXX X XX X",
"X X  X     X X             X X",
"X X  XXXXX X XXXXXXXXXX XXXX X",
"X X  XX  X              X X  X",
"X X  XX                 X X  X",
"X X  XXXXXXXXXXXXXXXXXX X XP X",
"X X                     X XXXX",
"X XXXXXXXXXXXXXXXXXXXXX X XXXX",
"X                       X   PX",
"X XXXXXXXXXXXXXXXXXXXXXXX XXXX",
"X                         XXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
]

prizes = []

levels.append(level_1)

def setup_maze(level):
  for y in range(len(level)):
    for x in range(len(level[y])):
      character = level[y][x]
      screen_x = (-358 + (x * 25))
      screen_y = (358 - (y * 25))
     
      if character == "X":
        wall.goto(screen_x, screen_y)
        wall.stamp()

        walls.append((screen_x,screen_y))
       
      if character == "L":
        piece.goto(screen_x, screen_y)

      if character == "P":
          prizes.append(Prize(screen_x, screen_y))


wall = Wall()
piece = Piece()

walls = []

setup_maze(levels[1])
print(walls)

turtle.listen()
turtle.onkey(piece.go_up,"Up")
turtle.onkey(piece.go_down,"Down")
turtle.onkey(piece.go_right,"Right")
turtle.onkey(piece.go_left,"Left")

window.tracer(0)

while True:
    for prize in prizes:
        if piece.is_collision(prize):
            piece.cyan += prize.cyan
            print ("Piece Cyan: {}".format(piece.cyan))
            
            prize.destroy()
            
            prizes.remove(prize)

t = 120
def countdown(t):
  while t:
    mins,secs = divmod(t, 60)
    timer = '{:02d}:{:02d}'.format(mins,secs)
    print(timer,end="\r")
    time.sleep(1)
    t -= 1

print("Time's Up!!")

window.update()


